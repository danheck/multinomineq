% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_nml.R
\name{compute_cnml}
\alias{compute_cnml}
\title{Compute NML Complexity}
\usage{
compute_cnml(prediction, n, c = 0.5, luck = c(1, 1), n.fit = 3,
  cores = 1)
}
\arguments{
\item{prediction}{a vector of strategy predictions. See details and \code{\link{predict_multiattribute}}}

\item{n}{vector with the number of choices per item type}

\item{c}{upper threshold of probabilities}

\item{luck}{parameters of luckiness function of LNML (i.e., parameters of a beta distribution). \code{luck = c(1.5, 1.5)} is equivalent to uniform prior for the Bayes factor}

\item{n.fit}{number of repeated fitting runs with random starting values}

\item{cores}{number of processing units to be used}
}
\description{
Enumerates discrete data space and sums the maximum likelihood values of all data vectors.
}
\details{
The sign of the numbers indicate the prediction
(positive = Option B, negative = Option A, zero = guessing), whereas
absolute values indicate the ordering of the error probabilities.
For instance, \code{c(-1,-3,2)} implies the predicted pattern (A,A,B) with error probabilities
(e1<e2<e3<c), where the upper boundary c=.50 by default.
}
\examples{
# predict: A/A/B with error probabilities e2,e3,e1<.20
p <- c(-3, -1, +2)
compute_cnml(p, n = c(2, 2, 2), c = .20)

# predict: A/A/B with error probabilities e2<e3<e1<.50
p <- c(-3, -1, +2)
attr(p, "ordered") <- TRUE
compute_cnml(p, n = c(2, 2, 2), c = .50)
}
